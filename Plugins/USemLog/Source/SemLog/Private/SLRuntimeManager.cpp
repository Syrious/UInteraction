// Copyright 2017, Institute for Artificial Intelligence - University of Bremen
// Author: Andrei Haidu (http://haidu.eu)

#include "SLRuntimeManager.h"
#include "SLLevelInfo.h"
#include "SLUtils.h"

// Sets default values
ASLRuntimeManager::ASLRuntimeManager()
{
	PrimaryActorTick.bCanEverTick = true;

	// Defaults
	bStartAtLoadTime = true;
	bIsInit = false;
	bIsStarted = false;
	bIsFinished = false;
	LogDirectory = FPaths::GameDir() + "SemLog";
	EpisodeId = "AutoGenerated";
	
	bLogRawData = true;
	RawDataUpdateRate = 0.f;
	RawDataDistanceThreshold = 0.5f;
	TimePassedSinceLastUpdate = 0.f;
	bWriteRawDataToFile = true;
	bBroadcastRawData = false;
	
	bLogEventData = true;
	bWriteEventDataToFile = true;
	bWriteEventTimelines = false;
	bBroadcastEventData = false;
}

// Make sure the manager is started before event publishers call BeginPlay
void ASLRuntimeManager::PostInitializeComponents()
{
	Super::PostInitializeComponents();

	// No tick by default
	SetActorTickEnabled(false);

	// Init manager
	ASLRuntimeManager::Init();
}

// Called when the game starts or when spawned
void ASLRuntimeManager::BeginPlay()
{
	Super::BeginPlay();

	// Start manager at load time
	if (bStartAtLoadTime)
	{
		ASLRuntimeManager::Start();
	}
}

// Called when actor removed from game or game ended
void ASLRuntimeManager::EndPlay(const EEndPlayReason::Type EndPlayReason)
{
	ASLRuntimeManager::Finish();
}

// Called every frame
void ASLRuntimeManager::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
	
	// Increase duration
	TimePassedSinceLastUpdate += DeltaTime;

	if (RawDataUpdateRate < TimePassedSinceLastUpdate)
	{
		// Log the raw data of the dynamic entities
		RawDataLogger->LogDynamicEntities();
		TimePassedSinceLastUpdate = 0.f;
	}
}

// Init loggers
void ASLRuntimeManager::Init()
{
	if (!bIsInit)
	{
		// Generate episode Id if not manually entered
		if (EpisodeId.Equals("AutoGenerated"))
		{
			EpisodeId = FSLUtils::GenerateRandomFString(4);
		}

		// Setup raw data logger
		if (bLogRawData)
		{
			// Create raw data logger UObject
			RawDataLogger = NewObject<USLRawDataLogger>(this, TEXT("RawDataLogger"));

			// Init logger 
			RawDataLogger->Init(GetWorld(), RawDataDistanceThreshold);

			// Set logging type
			if (bWriteRawDataToFile)
			{
				RawDataLogger->InitFileHandle(EpisodeId, LogDirectory);
			}

			if (bBroadcastRawData)
			{
				RawDataLogger->InitBroadcaster();
			}
		}

		// Setup event data logger
		if (bLogEventData)
		{
			// Create event data logger UObject
			EventDataLogger = NewObject<USLEventDataLogger>(this, TEXT("EventDataLogger"));

			// Initialize the event data
			EventDataLogger->InitLogger(EpisodeId);
		}

		// Set the manager as initialized
		bIsInit = true;
	}
}

// Start loggers
void ASLRuntimeManager::Start()
{
	if (bIsInit && !bIsStarted)
	{
		if (bLogRawData)
		{
			// Enable tick for raw data logging
			SetActorTickEnabled(true);

			// Log the first entry (static and dynamic entities) of the raw data
			RawDataLogger->LogFirstEntry();
		}

		if (bLogEventData)
		{
			// Start logger
			EventDataLogger->StartLogger(GetWorld()->GetTimeSeconds());

			// Add level info to the metadata
			for (TActorIterator<ASLLevelInfo> InfoItr(GetWorld()); InfoItr; ++InfoItr)
			{
				for (const auto& PropItr : InfoItr->LevelProperties)
				{
					EventDataLogger->AddMetadataProperty(MakeShareable(new FOwlTriple(PropItr)));
				}
				break;
			}
		}

		// Mark as started
		bIsStarted = true;
	}
}

// Finish loggers
void ASLRuntimeManager::Finish()
{
	if (bIsStarted && !bIsFinished)
	{
		if (bLogEventData && EventDataLogger)
		{
			// Finish up the logger - Terminate idle events
			EventDataLogger->FinishLogger(GetWorld()->GetTimeSeconds());

			if (bWriteEventDataToFile)
			{
				EventDataLogger->WriteEventsToFile(LogDirectory, bWriteEventTimelines);
			}

			if (bBroadcastEventData)
			{
				EventDataLogger->BroadcastFinishedEvents();
			}
		}

		// Mark as finished
		bIsFinished = true;
	}
}

// Add finished event
bool ASLRuntimeManager::AddFinishedEvent(TSharedPtr<FOwlNode> Event)
{
	if (bLogEventData && EventDataLogger)
	{		
		return EventDataLogger->InsertFinishedEvent(Event);
	}
	return false;
}

// Start an event
bool ASLRuntimeManager::StartEvent(TSharedPtr<FOwlNode> Event)
{
	if (bLogEventData && EventDataLogger)
	{
		// Add event start time
		Event->Properties.Emplace(FOwlTriple(
			"knowrob:startTime", 
			"rdf:resource",
			"&log;timepoint_" + FString::SanitizeFloat(GetWorld()->GetTimeSeconds())));
		return EventDataLogger->StartAnEvent(Event);
	}
	return false;
}

// Finish an event
bool ASLRuntimeManager::FinishEvent(TSharedPtr<FOwlNode> Event)
{
	if (bLogEventData && EventDataLogger)
	{
		// Add event end time
		Event->Properties.Emplace(FOwlTriple(
			"knowrob:endTime",
			"rdf:resource",
			"&log;timepoint_" + FString::SanitizeFloat(GetWorld()->GetTimeSeconds())));
		return EventDataLogger->FinishAnEvent(Event);
	}
	return false;
}

// Add metadata property
bool ASLRuntimeManager::AddMetadataProperty(TSharedPtr<FOwlTriple> Property)
{
	if (bLogEventData && EventDataLogger)
	{
		return EventDataLogger->AddMetadataProperty(Property);
	}
	return false;
}

// Add new entity to be logged
void ASLRuntimeManager::AddNewEntity(AActor* Actor)
{
	if (bLogRawData && RawDataLogger)
	{
		// Add new entity to be logged
		RawDataLogger->AddNewDynamicEntity(Actor);
	}

	if (bLogEventData && EventDataLogger)
	{
		// @TODO
		// Add event for removing an entity 
		TSharedPtr<FOwlNode> AddEntityEvent = MakeShareable(new FOwlNode("Remove entity event"));
		EventDataLogger->InsertFinishedEvent(AddEntityEvent);
	}
}

// Remove entity from logging
void ASLRuntimeManager::RemoveEntity(AActor* Actor)
{
	if (bLogRawData && RawDataLogger)
	{
		// Add new entity to be logged
		RawDataLogger->RemoveDynamicEntity(Actor);
	}

	if (bLogEventData && EventDataLogger)
	{
		// @TODO
		// Add event for removing an entity 
		TSharedPtr<FOwlNode> RemoveEntityEvent = MakeShareable(new FOwlNode("Remove entity event"));
		EventDataLogger->InsertFinishedEvent(RemoveEntityEvent);
	}
}